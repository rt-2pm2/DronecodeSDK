#pragma once

#include <vector>
${INCLUDES_STRING}

namespace dronecore {

class DeviceImpl;
class PluginImplBase;
${FORWARD_DECLARATION_STRING}

/**
 * @brief The DevicePluginContainer contains all plugins for a device.
 *
 * The content of the DevicePluginContainer is auto-generated at compile time.
 * Plugins such as Action or Telemetry are included so that they can be accessed
 * using `DroneCore::device().action()...`
 */
class DevicePluginContainer
{
public:
    /**
     * @private Constructor of DevicePluginContainer called internally.
     *
     * A device inheriting from DevicePluginContainer is created internally and can be accessed
     * using `DroneCore::device()`.
     *
     * @param impl device implementation internal
     */
    explicit DevicePluginContainer(DeviceImpl *impl);

    /**
     * @private Destructor of DevicePluginContainer called internally.
     *
     * The destructor of a DevicePluginContainer does not need to be called by any consumer of the
     * API. Instead the device will be cleaned up when DroneCore is destroyed.
     */
    virtual ~DevicePluginContainer();

${PLUGIN_GET_STRING}

    /**
     * @brief Copy constructor (object is not copyable).
     */
    DevicePluginContainer(const DevicePluginContainer &) = delete;
    /**
     * @brief Equality operator (object is not copyable).
     */
    const DevicePluginContainer &operator=(const DevicePluginContainer &) = delete;

protected:
    /** @private internal use only. */
    void construct_plugins(DeviceImpl *impl);

    /** @private internal use only. */
    void destruct_plugins();

    /** @private internal use only. */
    void init_plugins();

    /** @private internal use only. */
    void deinit_plugins();

    /** @private internal use only. */
    void enable_plugins();

    /** @private internal use only. */
    void disable_plugins();

${PLUGIN_MEMBER_STRING}

    /** @private internal use only. */
    std::vector<PluginImplBase *> _plugin_impl_list {};
};

} // namespace dronecore
