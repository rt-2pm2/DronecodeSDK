language: cpp

matrix:
  fast_finish: true
  include:
    - os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
      - MATRIX_EVAL="BUILD_TARGET=gcc_build"
      addons:
        apt:
          packages:
            - libtinyxml2-dev
            - libcurl4-openssl-dev
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      env:
      - MATRIX_EVAL="BUILD_TARGET=gcc_build && CC=gcc-5 && CXX=g++-5"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - libtinyxml2-dev
            - libcurl4-openssl-dev
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      env:
      - MATRIX_EVAL="BUILD_TARGET=coverage_build && CC=gcc-6 && CXX=g++-6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - g++-6
            - libtinyxml2-dev
            - libcurl4-openssl-dev
    - os: linux
      sudo: true
      services:
        - docker
      env:
      - MATRIX_EVAL="BUILD_TARGET=docker_build_ubuntu"
    - os: linux
      sudo: true
      services:
        - docker
      env:
      - MATRIX_EVAL="BUILD_TARGET=docker_build_fedora"
    - os: osx
      osx_image: xcode9.2
      env:
        - BUILD_TARGET=osx_build

before_install:
- eval "${MATRIX_EVAL}"

install:
- set -e
- if [[ "${BUILD_TARGET}" = "docker_build_ubuntu" ]]; then
    docker pull dronecore/dronecore-ubuntu-16.04;
  fi
- if [[ "${BUILD_TARGET}" = "docker_build_fedora" ]]; then
    docker pull dronecore/dronecore-fedora-27;
  fi
- if [[ "${BUILD_TARGET}" = "coverage_build" ]]; then
    pip install --user cpp-coveralls;
  fi

script:
- set -e
- if [[ "${BUILD_TARGET}" = "gcc_build" ]]; then
    make BUILD_TYPE=Debug run_unit_tests -j4;
    make clean;
    make INSTALL_PREFIX=/usr BUILD_TYPE=Release run_unit_tests -j4;
  fi
- if [[ "${BUILD_TARGET}" = "coverage_build" ]]; then
    make BUILD_TYPE=Coverage run_unit_tests -j4;
  fi
- if [[ "${BUILD_TARGET}" = "docker_build_ubuntu" ]]; then
    docker run -it --rm -v $TRAVIS_BUILD_DIR:/root/DroneCore:rw dronecore/dronecore-ubuntu-16.04 ./travis-docker-build.sh;
    docker run -it --rm -v $TRAVIS_BUILD_DIR:/root/DroneCore:rw dronecore/dronecore-ubuntu-16.04 ./create_packages.sh;
  fi
- if [[ "${BUILD_TARGET}" = "docker_build_fedora" ]]; then
    docker run -it --rm -v $TRAVIS_BUILD_DIR:/root/DroneCore:rw dronecore/dronecore-fedora-27 ./travis-docker-build.sh;
    docker run -it --rm -v $TRAVIS_BUILD_DIR:/root/DroneCore:rw dronecore/dronecore-fedora-27 ./create_packages.sh;
  fi
- if [[ "${BUILD_TARGET}" = "osx_build" ]]; then
    make;
    make default install;
    make run_unit_tests;
    make clean;
    make BUILD_TYPE=Release;
    make default install;
    make run_unit_tests;
  fi

after_success:
- if [[ "${BUILD_TARGET}" = "coverage_build" ]]; then
  coveralls --root . --build-root build/default
    --exclude=libs --exclude="plugins" --exclude="/usr/include/" --exclude="curl-android-ios"
    --exclude="debug_helpers" --exclude="example" --exclude="external_example"
    --exclude-pattern=".*CMakeFiles.*" --exclude-pattern=".*_test.*";
  fi

deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: hBX3pFWNZiDbz4yKnOjhLg3QS9Ubn1XePxSeIt2Btq5GzbomOPDCgpIFijBppliwj9oKc302EMnZSg2QWeAzFKn9UnmIflJ0E4iymYgwWdTJv+bSnYALJEmO8F6gF9FgRlPk8FCtZiECoTsa75w5TrEZKZpFpmzVYRiDu0eo6sEjW7UJPC0A2KSTXLrBCHSIZy/iasbGmuur4brG7NO0QdMOvDXvhsYfkXDRJFMTtTHvLiKJcqiunPfqARzf1H4x4iczRYscKu5Vn8Kmw3NANGkcIDvEj4ooih831EXxACRZw0VgycgNHOKRXKC9pZ4hLQMon+jxpQX+X8k/K5161oEkF/gCVKyFb31Pk/4Uwe81p1GJY2lAC7MDUxA98RKXhdvVYF2Cp44+IbF0YVoWRUtVAhknXRQ3Weg25kyVSu83q2nN2nZq2qGTnpNIbdN56s/F+uaFtipGEh+vmiv8rNUz+Z5MFrY2FQaSvBTFw9K4tNs9uc+VQd1bE7X5wh0yywEqUEw2nzqTB2xR+OubygUASbk2GLNdc254P0lrzCHbNM62Y7sRX06CM7hPlwhELEkVtUXZWJ0KuhQyLvRh3aPJ3Jj30EswTt/FGT1gzSP1FjjHBRZCK4P2D2rwJ5TMn2JrZKfPxmEd3kVmn6h80+gBbKgonGmZspd2SvPEI5g=
  file_glob: true
  file:
  - "*.deb"
  - "*.rpm"
  on:
    repo: dronecore/DroneCore
    tags: true
