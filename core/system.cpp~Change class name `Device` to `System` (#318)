#include "system.h"
#include "global_include.h"
#include "dronecore_impl.h"
#include "mavlink_include.h"
#include "mavlink_system.h"
#include "plugin_impl_base.h"
#include <functional>
#include <algorithm>
#include "px4_custom_mode.h"

// Set to 1 to log incoming/outgoing mavlink messages.
#define MESSAGE_DEBUGGING 0

namespace dronecore {

using namespace std::placeholders; // for `_1`

System::System(DroneCoreImpl &parent,
               uint8_t system_id,
               uint8_t component_id)
{
    _mavlink_system = std::make_shared<MAVLinkSystem>(parent,
                                                      system_id, component_id);
}

System::~System()
{
<<<<<<< 2574d38542c2c9f5b61778287af211ff857abd73:core/system.cpp~Change class name `Device` to `System` (#318)
    _should_exit = true;
    unregister_all_mavlink_message_handlers(this);

    unregister_timeout_handler(_autopilot_version_timed_out_cookie);
    unregister_timeout_handler(_heartbeat_timeout_cookie);

    if (_system_thread != nullptr) {
        _system_thread->join();
        delete _system_thread;
        _system_thread = nullptr;
    }
}

bool System::is_connected() const
{
    return _connected;
}

void System::register_mavlink_message_handler(uint16_t msg_id,
                                              mavlink_message_handler_t callback,
                                              const void *cookie)
{
    std::lock_guard<std::mutex> lock(_mavlink_handler_table_mutex);

    MavlinkHandlerTableEntry entry = {msg_id, callback, cookie};
    _mavlink_handler_table.push_back(entry);
}

void System::unregister_all_mavlink_message_handlers(const void *cookie)
{
    std::lock_guard<std::mutex> lock(_mavlink_handler_table_mutex);

    for (auto it = _mavlink_handler_table.begin();
         it != _mavlink_handler_table.end();
         /* no ++it */) {

        if (it->cookie == cookie) {
            it = _mavlink_handler_table.erase(it);
        } else {
            ++it;
        }
    }
    _mavlink_handler_table.clear();
}

void System::register_timeout_handler(std::function<void()> callback,
                                      double duration_s,
                                      void **cookie)
{
    _timeout_handler.add(callback, duration_s, cookie);
}

void System::refresh_timeout_handler(const void *cookie)
{
    _timeout_handler.refresh(cookie);
}

void System::unregister_timeout_handler(const void *cookie)
{
    _timeout_handler.remove(cookie);
}

void System::process_mavlink_message(const mavlink_message_t &message)
{
    if (_communication_locked) {
        return;
    }

    std::lock_guard<std::mutex> lock(_mavlink_handler_table_mutex);

#if MESSAGE_DEBUGGING==1
    bool forwarded = false;
#endif
    for (auto it = _mavlink_handler_table.begin(); it != _mavlink_handler_table.end(); ++it) {
        if (it->msg_id == message.msgid) {
#if MESSAGE_DEBUGGING==1
            LogDebug() << "Forwarding msg " << int(message.msgid) << " to " << size_t(it->cookie);
            forwarded = true;
#endif
            it->callback(message);
        }
    }
#if MESSAGE_DEBUGGING==1
    if (!forwarded) {
        LogDebug() << "Ignoring msg " << int(message.msgid);
    }
#endif
}

void System::add_call_every(std::function<void()> callback, float interval_s, void **cookie)
{
    _call_every_handler.add(callback, interval_s, cookie);
}

void System::change_call_every(float interval_s, const void *cookie)
{
    _call_every_handler.change(interval_s, cookie);
}

void System::reset_call_every(const void *cookie)
{
    _call_every_handler.reset(cookie);
}

void System::remove_call_every(const void *cookie)
{
    _call_every_handler.remove(cookie);
}

void System::process_heartbeat(const mavlink_message_t &message)
{
    mavlink_heartbeat_t heartbeat;
    mavlink_msg_heartbeat_decode(&message, &heartbeat);

    if (message.compid == MavlinkCommands::DEFAULT_COMPONENT_ID_AUTOPILOT) {
        _armed = ((heartbeat.base_mode & MAV_MODE_FLAG_SAFETY_ARMED) ? true : false);
        _hitl_enabled = ((heartbeat.base_mode & MAV_MODE_FLAG_HIL_ENABLED) ? true : false);
    }

    // We do not call on_discovery here but wait with the notification until we know the UUID.

    /* If we don't know the UUID yet, we try to find out. */
    if (_uuid == 0 && !_uuid_initialized) {
        request_autopilot_version();
    }

    set_connected();
}

void System::process_autopilot_version(const mavlink_message_t &message)
{
    // Ignore if they don't come from the autopilot component
    if (message.compid != MavlinkCommands::DEFAULT_COMPONENT_ID_AUTOPILOT) {
        return;
    }

    mavlink_autopilot_version_t autopilot_version;
    mavlink_msg_autopilot_version_decode(&message, &autopilot_version);

    _supports_mission_int =
        ((autopilot_version.capabilities & MAV_PROTOCOL_CAPABILITY_MISSION_INT) ? true : false);

    if (_uuid == 0 && autopilot_version.uid != 0) {

        // This is the best case. The system has a UUID and we were able to get it.
        _uuid = autopilot_version.uid;

    } else if (_uuid == 0 && autopilot_version.uid == 0) {

        // This is not ideal because the system has no valid UUID.
        // In this case we use the mavlink system ID as the UUID.
        _uuid = _system_id;

    } else if (_uuid != autopilot_version.uid) {

        // TODO: this is bad, we should raise a flag to invalidate system.
        LogErr() << "Error: UUID changed";
    }

    _uuid_initialized = true;
    set_connected();

    _autopilot_version_pending = false;
    unregister_timeout_handler(_autopilot_version_timed_out_cookie);
}

void System::process_statustext(const mavlink_message_t &message)
{
    mavlink_statustext_t statustext;
    mavlink_msg_statustext_decode(&message, &statustext);

    std::string debug_str = "MAVLink: ";

    switch (statustext.severity) {
        case MAV_SEVERITY_EMERGENCY:
            debug_str += "emergency";
            break;
        case MAV_SEVERITY_ALERT:
            debug_str += "alert";
            break;
        case MAV_SEVERITY_CRITICAL:
            debug_str += "critical";
            break;
        case MAV_SEVERITY_ERROR:
            debug_str += "error";
            break;
        case MAV_SEVERITY_WARNING:
            debug_str += "warning";
            break;
        case MAV_SEVERITY_NOTICE:
            debug_str += "notice";
            break;
        case MAV_SEVERITY_INFO:
            debug_str += "info";
            break;
        case MAV_SEVERITY_DEBUG:
            debug_str += "debug";
            break;
        default:
            break;
    }

    // statustext.text is not null terminated, therefore we copy it first to
    // an array big enough that is zeroed.
    char text_with_null[sizeof(statustext.text) + 1] {};
    memcpy(text_with_null, statustext.text, sizeof(statustext.text));

    LogDebug() << debug_str << ": " << text_with_null;
}

void System::heartbeats_timed_out()
{
    LogInfo() << "heartbeats timed out";
    set_disconnected();
}

void System::system_thread(System *self)
{
    dl_time_t last_time {};

    while (!self->_should_exit) {

        if (self->_time.elapsed_since_s(last_time) >= System::_HEARTBEAT_SEND_INTERVAL_S) {
            send_heartbeat(*self);
            last_time = self->_time.steady_time();
        }

        self->_call_every_handler.run_once();
        self->_timeout_handler.run_once();
        self->_params.do_work();
        self->_commands.do_work();

        if (self->_connected) {
            // Work fairly fast if we're connected.
            std::this_thread::sleep_for(std::chrono::milliseconds(10));
        } else {
            // Be less aggressive when unconnected.
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
    }
}

void System::add_new_component(uint8_t component_id)
{
    _components.insert(component_id);
}

size_t System::total_components() const
{
    return _components.size();
}

void System::send_heartbeat(System &self)
{
    mavlink_message_t message;
    // Self is GCS (its not autopilot!); hence MAV_AUTOPILOT_INVALID.
    mavlink_msg_heartbeat_pack(_own_system_id, _own_component_id, &message,
                               MAV_TYPE_GCS, MAV_AUTOPILOT_INVALID, 0, 0, 0);
    self.send_message(message);
=======
}

bool System::is_standalone() const
{
    return _mavlink_system->is_standalone();
}

bool System::is_autopilot() const
{
    return _mavlink_system->is_autopilot();
}

bool System::has_camera(uint8_t camera_id) const
{
    return _mavlink_system->has_camera(camera_id);
}

bool System::has_gimbal() const
{
    return _mavlink_system->has_gimbal();
}

void System::add_new_component(uint8_t component_id)
{
    return _mavlink_system->add_new_component(component_id);
>>>>>>> core, plugins: Re-organize System class to fix #325:core/system.cpp
}

void System::process_mavlink_message(const mavlink_message_t &message)
{
    return _mavlink_system->process_mavlink_message(message);
}

void System::set_system_id(uint8_t system_id)
{
    return _mavlink_system->set_system_id(system_id);
}

<<<<<<< 2574d38542c2c9f5b61778287af211ff857abd73:core/system.cpp~Change class name `Device` to `System` (#318)
void System::set_connected()
{
    bool enable_needed = false;
    {
        std::lock_guard<std::mutex> lock(_connection_mutex);

        if (!_connected && _uuid_initialized) {

            _parent.notify_on_discover(_uuid);
            _connected = true;

            register_timeout_handler(std::bind(&System::heartbeats_timed_out, this),
                                     _HEARTBEAT_TIMEOUT_S,
                                     &_heartbeat_timeout_cookie);
            enable_needed = true;

        } else if (_connected) {
            refresh_timeout_handler(_heartbeat_timeout_cookie);
        }
        // If not yet connected there is nothing to do/
    }
    if (enable_needed) {
        std::lock_guard<std::mutex> lock(_plugin_impls_mutex);
        for (auto plugin_impl : _plugin_impls) {
            plugin_impl->enable();
        }
    }
}

void System::set_disconnected()
=======
bool System::is_connected() const
>>>>>>> core, plugins: Re-organize System class to fix #325:core/system.cpp
{
    return _mavlink_system->is_connected();
}

uint64_t System::get_uuid() const
{
    // We want to support UUIDs if the autopilot tells us.
    return _mavlink_system->get_uuid();
}

uint8_t System::get_system_id() const
{
    return _mavlink_system->get_system_id();
}

} // namespace dronecore
