#include "device_plugin_container.h"
#include "plugin_impl_base.h"
#include "device_impl.h"

${IMPL_INCLUDES_STRING}

namespace dronecore {

DevicePluginContainer::DevicePluginContainer(DeviceImpl *impl) :
${PLUGIN_CTOR_STRING}
    _plugin_impl_list()
{
${PLUGIN_LIST_APPEND_STRING}

    for (auto it = _plugin_impl_list.begin(); it != _plugin_impl_list.end(); ++it) {
        (**it).set_parent(impl);
    }

    init_plugins();

    impl->subscribe_on_discovery(std::bind(&DevicePluginContainer::enable_plugins, this));
    impl->subscribe_on_timeout(std::bind(&DevicePluginContainer::disable_plugins, this));
}

DevicePluginContainer::~DevicePluginContainer()
{
    deinit_plugins();

    for (auto it = _plugin_impl_list.begin(); it != _plugin_impl_list.end(); /*++it*/) {
        // Desctruct
        delete *it;
        // And remove from list
        it = _plugin_impl_list.erase(it);
    }
}

void DevicePluginContainer::init_plugins()
{
    for (auto it = _plugin_impl_list.begin(); it != _plugin_impl_list.end(); ++it) {
        (**it).init();
    }
}

void DevicePluginContainer::deinit_plugins()
{
    for (auto it = _plugin_impl_list.begin(); it != _plugin_impl_list.end(); ++it) {
        (**it).deinit();
    }
}

void DevicePluginContainer::enable_plugins()
{
    for (auto it = _plugin_impl_list.begin(); it != _plugin_impl_list.end(); ++it) {
        (**it).enable();
    }
}

void DevicePluginContainer::disable_plugins()
{
    for (auto it = _plugin_impl_list.begin(); it != _plugin_impl_list.end(); ++it) {
        (**it).disable();
    }
}


} // namespace dronecore
